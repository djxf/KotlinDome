package DesignPattern


/**
 * 适配器模式：将一个类的接口转换成客户希望的另外一个接口。
 *           适配器模式使得原本由于接口不兼容，而不能一起工作
 *           的那些类，可以一起工作。
 *
 *    体会设计模式
 *          同时支持数据库和文件的日志管理系统。
 *          1 日志管理第一版
 *              在第一版的时候，用户要求以文件的形式记录。
 *          2 日志管理第二版
 *              要求使用数据库管理。
 *
 *
 *   适配器模式的主要功能是进行转换匹配，目的是复用已有的功能。而不是来实现新的接口。
 *   适配器里面也可以实现功能，称这种适配器为智能适配器。
 *
 *   3 对象组合。
 *   4 适配器Adapter实现的复杂程度，取决于Target,Adapter的相似度。
 *   5 缺省适配：为一个接口提供缺省实现。
 *
 *
 *
 *   双向适配器：
 *
 *
 *
 *   对象适配器和类适配器
 *          1 对象适配器的实现：依赖于对象组合。对象组合的方式。
 *          2 类适配器：采用多重继承对一个接口和另一个接口进行匹配。（Java不支持多重继承。）
 *
 *   类适配器和对象适配器的权衡
 *      1 从实现上：类适配器使用对象继承的方式，是静态的定义的方式。而对象适配器使用对象组合
 *      的方式，是动态组合的方式。
 *      2 对于类适配器：由于适配器直接继承了Adapter，使得适配器不能和Adapter的子类一起工作。
 *      因为继承是个静态的关系。当适配器继承了Adapter之后，就不可能去处理。Adapter的子类了。
 *      3 对于类适配器：适配器可以重写定义Adapter的部分行为。相当于子类覆盖父类的部分行为。
 *      对于对象适配器要重写定义Adapter的行为比较困难。这种情况下需要定义Adapter的子类来实现
 *      重定义。然后让适配器组合子类。
 *      4 对于类适配器仅仅引入了一个对象，并不需要额外的引用来间接得到Adapter。
 *      对于对象适配器：需要额外的引用来间接得到Adaptee。
 *
 *
 *      适配器模式的优缺点：
 *          1 更好的复用性。
 *          2 更好的拓展性。
 *          3 过多的适配器，会让系统非常凌乱，不容易整体把握。
 *
 *      适配器模式的本质：
 *          转换匹配，复用功能。
 *      何时使用适配器模式：
 *          1 如果你想要使用一个已经存在的类，但是它的接口不符合你的需求，这种情况可以
 *          使用适配器模式，来把已有的实现转换成你需要的接口。
 *          2 如果你想创建一个可以复用的类。这个类可以和一些不兼容的类一起工作。这种情况可以使用适配器
 *          模式，到时候需要什么就适配什么。
 *          3 如果你想使用一些存在的子类，但是不可能对每一个子类都进行适配，这种情况可以选用对象适配器
 *          直接适配这些子类的父类就好了。
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *

 */